
package view;


import connector.ServerConnector;
import controller.CustomerController;
import controller.PaymentController;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.Customer;
import model.Payment;
import static view.MainFrame.desktopPane;


public class ViewAllPayment extends javax.swing.JInternalFrame {

    static String updateClient;
    JTabbedPane jTabbedPane;

 
    public ViewAllPayment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientTable = new javax.swing.JTable();
        updateButton = new javax.swing.JButton();
        ClientComboBox = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        refereshButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        viewAllButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        refundTable = new javax.swing.JTable();
        updateButton1 = new javax.swing.JButton();
        manageCustomerForm = new javax.swing.JLabel();

        jPanel1.setBackground(java.awt.Color.white);

        clientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoi.ID", "CustID", "Stor.ID", "Pay.Dat", "Pay.Typ", "Pay.Opt", "Annu.Fee", "Pay.Amo", "DueDate", "Descrip."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(clientTable);

        updateButton.setBackground(new java.awt.Color(153, 204, 255));
        updateButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        ClientComboBox.setEditable(true);
        ClientComboBox.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ClientComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientComboBoxActionPerformed(evt);
            }
        });
        ClientComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ClientComboBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ClientComboBoxKeyReleased(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        printButton.setBackground(new java.awt.Color(153, 204, 255));
        printButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        refereshButton.setBackground(new java.awt.Color(153, 204, 255));
        refereshButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refereshButton.setText("Refresh");
        refereshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refereshButtonActionPerformed(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("NIC");

        viewAllButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewAllButton.setText("View All Payment");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        refundTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StorageID", "CustID", "RefunDate", "AnnualFee"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(refundTable);
        if (refundTable.getColumnModel().getColumnCount() > 0) {
            refundTable.getColumnModel().getColumn(0).setResizable(false);
            refundTable.getColumnModel().getColumn(1).setResizable(false);
            refundTable.getColumnModel().getColumn(2).setResizable(false);
            refundTable.getColumnModel().getColumn(3).setResizable(false);
        }

        updateButton1.setBackground(new java.awt.Color(153, 204, 255));
        updateButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateButton1.setText("Refund Payment");
        updateButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(193, Short.MAX_VALUE)
                .addComponent(refereshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ClientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ClientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton))
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewAllButton)
                    .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refereshButton)
                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(263, 263, 263))
        );

        viewTabbedPane.addTab("View Customer Details", jPanel1);

        manageCustomerForm.setBackground(java.awt.Color.white);
        manageCustomerForm.setFont(new java.awt.Font("Droid Serif", 0, 36)); // NOI18N
        manageCustomerForm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manageCustomerForm.setText("Manage Payment Form");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(manageCustomerForm)
                .addGap(225, 225, 225))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 24, Short.MAX_VALUE)
                .addComponent(viewTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageCustomerForm)
                .addGap(18, 18, 18)
                .addComponent(viewTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
//        int rowcount = clientTable.getSelectedRowCount();
//        if (rowcount == 1) {
//            try {
//                int row = clientTable.getSelectedRow();
//                updateClient = (String) clientTable.getValueAt(row, 0);
//                
//                viewTabbedPane.setSelectedIndex(1);
//                updateClientForm();
//                
//            } catch (ClassNotFoundException | SQLException ex) {
//                Logger.getLogger(ViewAllCustomer.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } else if (rowcount == 0) {
//            JOptionPane.showMessageDialog(this, "Please select a Client First");
//        } else {
//            JOptionPane.showMessageDialog(this, "Please select only one Client");
//
//        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void ClientComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientComboBoxActionPerformed

    }//GEN-LAST:event_ClientComboBoxActionPerformed

    private void ClientComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ClientComboBoxKeyPressed

    }//GEN-LAST:event_ClientComboBoxKeyPressed

    private void ClientComboBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ClientComboBoxKeyReleased

    }//GEN-LAST:event_ClientComboBoxKeyReleased

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String clientName = (String) ClientComboBox.getSelectedItem();
        
        String CID = (String) ClientComboBox.getSelectedItem();
        DefaultTableModel tableModel = (DefaultTableModel) clientTable.getModel();
        Customer[] detailArray;
        

        try {
            CustomerController customerController=ServerConnector.getServerConnector().getCustomerController();
            detailArray = customerController.getNameDetails(clientName);
            tableModel.setRowCount(0);
            for (Customer customerDetail : detailArray) {

                Object rows[] = {customerDetail.getCustID(), customerDetail.getNic(), customerDetail.getFirstName(), customerDetail.getLastName(), customerDetail.getDob(),customerDetail.getAddress(),customerDetail.getContactNo(),customerDetail.getEmail(),customerDetail.getGender()};
                tableModel.addRow(rows);
            }
        } catch (ClassNotFoundException | SQLException | RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(ViewAllPayment.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            CustomerController customerController=ServerConnector.getServerConnector().getCustomerController();
            detailArray = customerController.getCIDDetails(clientName);
            tableModel.setRowCount(0);
            for (Customer customerDetail : detailArray) {

                Object rows[] = {customerDetail.getCustID(), customerDetail.getNic(), customerDetail.getFirstName(), customerDetail.getLastName(), customerDetail.getDob(),customerDetail.getAddress(),customerDetail.getContactNo(),customerDetail.getEmail(),customerDetail.getGender()};
                tableModel.addRow(rows);
            }
        } catch (ClassNotFoundException | SQLException | RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(ViewAllPayment.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
       
    }//GEN-LAST:event_printButtonActionPerformed

    private void refereshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refereshButtonActionPerformed
        
    }//GEN-LAST:event_refereshButtonActionPerformed

    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        try {
            DefaultTableModel tableModel = (DefaultTableModel) clientTable.getModel();

            PaymentController paymentController=ServerConnector.getServerConnector().getPaymentController();
            Payment[] array = paymentController.viewAllPayment();
            tableModel.setRowCount(0);
            for (Payment customerDetail : array) {
                Object row[] = {customerDetail.getInvoiceID(),customerDetail.getCustID(), customerDetail.getStorageID(), customerDetail.getPaymentDate(), customerDetail.getPaymentType(), customerDetail.getPaymentOption(),customerDetail.getAnnualFee(),customerDetail.getPaymentAmount(),customerDetail.getDueDate(),customerDetail.getDescription()};
                tableModel.addRow(row);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewAllPayment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ViewAllPayment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ViewAllPayment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(ViewAllPayment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ViewAllPayment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewAllButtonActionPerformed

    private void updateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButton1ActionPerformed
    desktopPane.removeAll();
        RefundingPayment viewAllStorage = new RefundingPayment();
        viewAllStorage.setSize(desktopPane.getSize());
        desktopPane.add(viewAllStorage);
        viewAllStorage.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_updateButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JComboBox ClientComboBox;
    private javax.swing.JTable clientTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel manageCustomerForm;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton printButton;
    private javax.swing.JButton refereshButton;
    private javax.swing.JTable refundTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton updateButton1;
    private javax.swing.JButton viewAllButton;
    private javax.swing.JTabbedPane viewTabbedPane;
    // End of variables declaration//GEN-END:variables

//    public void updateClientForm() throws ClassNotFoundException, SQLException {
//        Customer[] customerArray = null;
//        customerArray = CustomerController.getCIDDetails(ViewAllCustomer.updateClient);
//        for (Customer customer : customerArray) {
//            nic1TextField.setText(customer.getNic());
//            firstNameTextField.setText(customer.getFirstName());
//            lastNameTextField.setText(customer.getLastName());
//            dobTextField.setDate(customer.getDob());
//            addressTextField.setText(customer.getAddress());
//            contactTextField.setText(customer.getContactNo());
//        }
//
//    }

        
    
    
}
