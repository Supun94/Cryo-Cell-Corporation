
package view.user;



import connector.ServerConnector;
import controller.UserController;
import java.awt.Color;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.Admin;


public class CheckUserForm extends javax.swing.JDialog {
String newpass;
    /**
     * Creates new form CheckUserForm
     */
    public CheckUserForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        confirmLabel = new javax.swing.JLabel();
        currentText = new javax.swing.JPasswordField();
        strengthLabel = new javax.swing.JLabel();
        newText = new javax.swing.JPasswordField();
        checkLabel = new javax.swing.JLabel();
        confirmText = new javax.swing.JPasswordField();
        currentLabel = new javax.swing.JLabel();
        newLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        confirmLabel.setText("Confirm new Password");

        currentText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentTextActionPerformed(evt);
            }
        });
        currentText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currentTextKeyReleased(evt);
            }
        });

        newText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTextActionPerformed(evt);
            }
        });
        newText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                newTextKeyReleased(evt);
            }
        });

        checkLabel.setForeground(new java.awt.Color(0, 51, 204));

        confirmText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmTextActionPerformed(evt);
            }
        });
        confirmText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                confirmTextKeyReleased(evt);
            }
        });

        currentLabel.setText("Current Password");

        newLabel.setText("New Password");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("User Settings");

        confirmButton.setText("Confirm");
        confirmButton.setEnabled(false);
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentLabel)
                    .addComponent(newLabel)
                    .addComponent(confirmLabel))
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(currentText)
                    .addComponent(newText)
                    .addComponent(confirmText, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(strengthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                                .addComponent(confirmButton)
                                .addGap(26, 26, 26))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(cancelButton)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentLabel)
                    .addComponent(currentText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newLabel)
                    .addComponent(newText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(strengthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmLabel)
                    .addComponent(confirmText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(checkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(cancelButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void currentTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentTextActionPerformed
        newText.requestFocus();
    }//GEN-LAST:event_currentTextActionPerformed

    private void currentTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentTextKeyReleased
        checkLabel.setText("");
        strengthLabel.setText("");
        setConfirmButtonEnabled();
    }//GEN-LAST:event_currentTextKeyReleased

    private void newTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTextActionPerformed
        confirmText.requestFocus();
    }//GEN-LAST:event_newTextActionPerformed

    private void newTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newTextKeyReleased
    try {
        checkLabel.setText("");
        setConfirmButtonEnabled();
        String current = new String(currentText.getPassword());
        UserController userController=ServerConnector.getServerConnector().getUserController();
        
        String password = userController.getPassword(UserForm.username);
        newpass = new String(newText.getPassword());
        int length = newpass.length();
        if (length <= 5) {
            strengthLabel.setForeground(Color.red);
            strengthLabel.setText("Strength: Weak");
        } else if (length > 5 & length < 10) {
            strengthLabel.setForeground(Color.pink);
            strengthLabel.setText("Strength: Medium");
        } else if (length >= 10) {
            strengthLabel.setForeground(Color.orange);
            strengthLabel.setText("Strength: Strong");
        }
    } catch (NotBoundException ex) {
        Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
    } catch (MalformedURLException ex) {
        Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
    } catch (RemoteException ex) {
        Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }//GEN-LAST:event_newTextKeyReleased

    private void confirmTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmTextActionPerformed
        confirmButton.requestFocus();
    }//GEN-LAST:event_confirmTextActionPerformed

    private void confirmTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confirmTextKeyReleased
        checkLabel.setText("");
        strengthLabel.setText("");
        setConfirmButtonEnabled();
    }//GEN-LAST:event_confirmTextKeyReleased

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        String confirm = new String(confirmText.getPassword());
        if (newpass.equals(confirm)) {
            try {
                UserController userController=ServerConnector.getServerConnector().getUserController();
                Admin user = new Admin(UserForm.username, newpass);
                int res = userController.updatepassword(user);
                if (res > 0) {
                    JOptionPane.showMessageDialog(this, "Password changed Successfully");
                    currentText.setText("");
                    newText.setText("");
                    confirmText.setText("");
                    strengthLabel.setText("");
                    confirmButton.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(this, "Password changed Failed");
                    strengthLabel.setText("");
                    confirmButton.setEnabled(false);
                }
            } catch (NotBoundException ex) {
                Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CheckUserForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            checkLabel.setText("Passwords do not match.Try Again");
            strengthLabel.setText("");
            currentText.setText("");
            newText.setText("");
            confirmButton.setEnabled(false);
            confirmText.setText("");

        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CheckUserForm dialog = new CheckUserForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel checkLabel;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel confirmLabel;
    private javax.swing.JPasswordField confirmText;
    private javax.swing.JLabel currentLabel;
    private javax.swing.JPasswordField currentText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel newLabel;
    private javax.swing.JPasswordField newText;
    private javax.swing.JLabel strengthLabel;
    // End of variables declaration//GEN-END:variables

 public void setConfirmButtonEnabled() {
        boolean b = new String(currentText.getPassword()).isEmpty() || new String(newText.getPassword()).isEmpty() || new String(confirmText.getPassword()).isEmpty();
        confirmButton.setEnabled(!b);
    }


}
